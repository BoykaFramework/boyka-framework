"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8209],{8570:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(79);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(b,l(l({ref:t},p),{},{components:n})):r.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(5907),a=(n(79),n(8570));const i={title:"\ud83d\udd00 Branching Strategy",sidebar_position:2},l=void 0,o={unversionedId:"project-details/branch-strategy",id:"project-details/branch-strategy",title:"\ud83d\udd00 Branching Strategy",description:"Branching strategy",source:"@site/docs/contributing/project-details/branch-strategy.md",sourceDirName:"project-details",slug:"/project-details/branch-strategy",permalink:"/boyka-framework/contributing/project-details/branch-strategy",draft:!1,editUrl:"https://github.com/BoykaFramework/boyka-framework/edit/main/website/docs/contributing/project-details/branch-strategy.md",tags:[],version:"current",lastUpdatedBy:"WasiqB",lastUpdatedAt:1694450833,formattedLastUpdatedAt:"Sep 11, 2023",sidebarPosition:2,frontMatter:{title:"\ud83d\udd00 Branching Strategy",sidebar_position:2},sidebar:"contributing",previous:{title:"\ud83d\udcda Project Structure",permalink:"/boyka-framework/contributing/project-details/structure"},next:{title:"\ud83d\udee1\ufe0f Branch Protection",permalink:"/boyka-framework/contributing/project-details/branch-protection"}},s={},c=[{value:"\ud83d\udc68\u200d\ud83c\udfed Contributor steps",id:"-contributor-steps",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udcbc Maintainer steps",id:"-maintainer-steps",level:2},{value:"\ud83e\udd16 GitHub Actions steps",id:"-github-actions-steps",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Branching strategy",src:n(8062).Z,width:"972",height:"682"})),(0,a.kt)("h2",{id:"-contributor-steps"},"\ud83d\udc68\u200d\ud83c\udfed Contributor steps"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All contributors should create a branch named as ",(0,a.kt)("inlineCode",{parentName:"li"},"issue-<issue-number>")),(0,a.kt)("li",{parentName:"ul"},"Once the contributor is done with the work, they should create the PR to merge their branch to ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," branch")),(0,a.kt)("h2",{id:"-maintainer-steps"},"\ud83e\uddd1\u200d\ud83d\udcbc Maintainer steps"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Maintainers will review the PR raised by contributors and approve / suggest changes in it"),(0,a.kt)("li",{parentName:"ul"},"Once everything is fine, maintainers will squash merge the PR to ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," branch"),(0,a.kt)("li",{parentName:"ul"},"For PR raised in ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch, when all the issue tickets planned for the current milestone are closed, the ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," branch will be merged to ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch without squashing the commits"),(0,a.kt)("li",{parentName:"ul"},"For PR raised in ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch, when the testing on release candidate created on ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," is done, the ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch will be merged to ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch without squashing the commits")),(0,a.kt)("h2",{id:"-github-actions-steps"},"\ud83e\udd16 GitHub Actions steps"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"As soon as the PR is merged to ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," branch,",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The new PR will get automatically created from ",(0,a.kt)("inlineCode",{parentName:"li"},"develop")," branch to ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch"),(0,a.kt)("li",{parentName:"ul"},"Tests will be triggered to run on core and website projects"))),(0,a.kt)("li",{parentName:"ul"},"Once the PR is merged to ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch, the new PR will get automatically created from ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch to ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Tests will be triggered to run on core and website projects"),(0,a.kt)("li",{parentName:"ul"},"Also a ",(0,a.kt)("inlineCode",{parentName:"li"},"release candidate")," will be created from ",(0,a.kt)("inlineCode",{parentName:"li"},"staging")," branch and will be released to Maven Central and tag will be created in GitHub",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Tests will be triggered to run on sample tests project to run the tests on ",(0,a.kt)("inlineCode",{parentName:"li"},"release candidate")))))),(0,a.kt)("li",{parentName:"ul"},"Once the PR is merged to ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch,",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The final release will be created from ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch and published to Maven Central"),(0,a.kt)("li",{parentName:"ul"},"After release to Maven Central, GitHub release will also get created along with Release discussion thread"),(0,a.kt)("li",{parentName:"ul"},"Tag will be created in GitHub",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Tests will be triggered to run on sample tests project to run the tests on ",(0,a.kt)("inlineCode",{parentName:"li"},"release candidate")))),(0,a.kt)("li",{parentName:"ul"},"Finally a Tweet will be posted on Twitter handle ",(0,a.kt)("a",{parentName:"li",href:"https://dub.sh/boyka-twitter"},"@BoykaFramework"),", informing about the Boyka framework release")))))}d.isMDXComponent=!0},8062:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/branching-strategy-1424b7b67fe11a8e0f35519c37b8dba0.png"}}]);