"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[237],{2140:function(e,t,n){n.r(t),n.d(t,{default:function(){return O}});var i=n(7612),a=n(8569),s=n(3830),r=n(2238),o="features_ez_S",l="featureSvg_bdXF",c=n(9864),u=function(e){var t=e.title,n=e.image;return i.createElement("div",{className:"text--center"},i.createElement("img",{className:l,alt:t,src:(0,c.Z)(n)}))},m=function(e){var t=e.title,n=e.description;return i.createElement("div",{className:"text--center padding-horiz--md"},i.createElement("h2",null,t),i.createElement("p",null,n))},g=function(e){var t=e.title,n=e.image,a=e.description;return i.createElement("div",{className:(0,r.Z)("col col--4")},i.createElement(u,{title:t,image:n}),i.createElement(m,{title:t,description:a}))},p=function(e){var t=e.features;return i.createElement("section",{className:o},i.createElement("div",{className:"container"},i.createElement("div",{className:"row"},t.map((function(e,t){return i.createElement(g,(0,s.Z)({key:t},e))})))))},b=JSON.parse('{"BH":"/img/boyka-favicon.png","TN":"boyka","WL":"Ultimate Test Automation framework for Web, API, Android and iOS platforms","ZY":[{"id":1,"text":"Get Started","type":"button--primary","href":"/docs/intro","target":"_self"},{"id":2,"text":"View on GitHub","type":"button--info","href":"https://github.com/WasiqBhamla/boyka-java","target":"_self"},{"id":3,"text":"Join us on Discord","type":"button--info","href":"https://discord.gg/dUg8K9DAsR","target":"_blank"}],"tr":[{"id":1,"userId":"WasiqBhamla","repoName":"boyka-java","type":"Star"},{"id":2,"userId":"WasiqBhamla","repoName":"boyka-java","type":"Watch"},{"id":3,"userId":"WasiqBhamla","repoName":"boyka-java","type":"Fork"}],"R2":[{"title":"Zero boilerplate code","image":"img/home/no-code.svg","description":"Exposes ready to use static methods to perform various actions on web, mobile and API platforms, thus reducing the need to write any boilerplate codes."},{"title":"Configurable","image":"img/home/configurable.svg","description":"Highly configurable via JSON files and environment variables. It is easy to extend and customize the framework."},{"title":"API Testing","image":"img/home/api-testing.svg","description":"Supports API testing with simple and easy to write test cases."},{"title":"Web Testing","image":"img/home/web-testing.svg","description":"Supports Web testing with Chrome, Firefox, Edge, Safari and Opera browsers."},{"title":"Cloud Support","image":"img/home/cloud-support.svg","description":"Provides facility to run tests on Cloud platforms like BrowserStack."},{"title":"Parallel execution","image":"img/home/parallel.svg","description":"Allows parallel and sequential execution of tests using any testing framework."},{"title":"Logging events","image":"img/home/logging.svg","description":"Provides logging support using Log4J 2 to log all events occurred during test execution."},{"title":"Inbuilt verification","image":"img/home/inline-check.svg","description":"Provides inbuilt verification for inline assertion of element properties and API responses."}]}'),d="HeroContainer_v2Am",f="HeroContent_wUuq",v="HeroTitle_d7d0",h="HeroDescription_Bq3r",y="CallToActions_tDGG",w="ctaButtons_Nl6G",q="SocialButtons_sdl9",E=n(8923),T=function(e){var t=e.userId,n=e.repoName,a=void 0===n?void 0:n,s=e.type,r=void 0===s?"Follow":s,o=""+t,l=""+r,c=""+r;return"Follow"!==r&&a&&(l+=" "+(o+="/"+a)),"Watch"===r?o+="/subscription":"Fork"===r?o+="/fork":"Follow"===r&&(c+=" @"+t),i.createElement(E.Z,{href:"https://github.com/"+o,"data-color-scheme":"no-preference: dark_dimmed; light: dark_dimmed; dark: dark_dimmed;","data-size":"large","data-show-count":"true","aria-label":l+" on GitHub"},c)},k=n(8348),_=function(e){var t=e.href,n=e.type,a=e.target,s=e.text;return i.createElement(k.Z,{className:(0,r.Z)("button",n),to:t,target:a},s)},A=n(8157),N=n.n(A),R=function(e){var t=e.title,n=e.tagLine;return i.createElement("div",{className:f},i.createElement("h1",{className:v},t),i.createElement(N(),{avgTypingDelay:40,cursor:{hideWhenDone:!0,show:!1}},i.createElement("p",{className:h},n)))},x=function(e){var t=e.buttons;return i.createElement("div",{className:w},t&&t.map((function(e){return i.createElement(_,{key:e.id,href:(0,c.Z)(e.href),text:e.text,type:e.type,target:e.target})})))},B=function(e){var t=e.gitButtons;return i.createElement("div",{className:q},t&&t.map((function(e){return i.createElement(T,{key:e.id,id:e.id,userId:e.userId,repoName:e.repoName,type:e.type})})))},S=function(e){var t=e.title,n=e.tagLine,a=e.image,s=e.buttons,r=void 0===s?[]:s,o=e.gitButtons,l=void 0===o?[]:o;return i.createElement("section",{className:d,style:{backgroundImage:"linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url("+(0,c.Z)(a)+")"}},i.createElement(R,{title:t,tagLine:n}),i.createElement("div",{className:y},i.createElement(x,{buttons:r}),i.createElement(B,{gitButtons:l})))},j=n(5292),P=n(4697),L=n(7550),C="TutorialSection_qzmZ",Z="CodeBlock_XO5B",U=function(){return i.createElement("section",{className:C},i.createElement(j.Z,null,i.createElement(P.Z,{value:"API Testing"},i.createElement(j.Z,null,i.createElement(P.Z,{value:"config-setup",label:"1. Config Setup"},i.createElement(L.Z,{className:Z,language:"json",title:"src/test/resources/boyka-config.json"},'{\n  "ui": {\n    ...\n  },\n  "api": {\n    "key_1": {\n      "base_uri": "https://reqres.in",\n      "base_path": "/api",\n      "read_timeout": 2,\n      "write_timeout": 2,\n      "connection_timeout": 1,\n      "logging": {\n        "request": true,\n        "response": true\n      }\n    }\n  }\n}')),i.createElement(P.Z,{value:"build-request",label:"2. Build Request"},i.createElement(L.Z,{className:Z,language:"java",title:"src/test/java/package/TestApi.java"},'import static com.github.wasiqb.boyka.builders.ApiRequest.createRequest;\nimport static com.github.wasiqb.boyka.enums.RequestMethod.POST;\nimport static com.github.wasiqb.boyka.manager.ApiManager.execute;\n\nimport com.github.wasiqb.boyka.builders.ApiRequest;\nimport com.github.wasiqb.boyka.builders.ApiResponse;\nimport com.github.wasiqb.boyka.testng.api.requests.User;\nimport org.testng.annotations.Test;\n\npublic class TestApi {\n    @Test (description = "Test POST request for creating a new pet", priority = 1)\n    public void testUserCreation () {\n        // Create request body object.\n        // highlight-start\n        final User user = User.createUser ()\n            .name ("Wasiq")\n            .job ("Software Engineer")\n            .create ();\n        \n        // Build Request.\n        final ApiRequest request = createRequest ().configKey ("key_1")\n            .method (POST)\n            .path ("/users")\n            .bodyObject (user)\n            .create ();\n        // highlight-end\n\n        // Execute Request.\n        final ApiResponse response = execute (request);\n\n        // Verify Response.\n        response.verifyStatusCode ()\n            .isEqualTo (201);\n        response.verifyTextField ("id")\n            .isNotNull ();\n        response.verifyTextField ("name")\n            .isEqualTo (user.getName ());\n        response.verifyTextField ("job")\n            .isEqualTo (user.getJob ());\n        response.verifyTextField ("createdAt")\n            .isNotNull ();\n    }\n}')),i.createElement(P.Z,{value:"execute-request",label:"3. Execute Request"},i.createElement(L.Z,{className:Z,language:"java",title:"src/test/java/package/TestApi.java"},'import static com.github.wasiqb.boyka.builders.ApiRequest.createRequest;\nimport static com.github.wasiqb.boyka.enums.RequestMethod.POST;\nimport static com.github.wasiqb.boyka.manager.ApiManager.execute;\n\nimport com.github.wasiqb.boyka.builders.ApiRequest;\nimport com.github.wasiqb.boyka.builders.ApiResponse;\nimport com.github.wasiqb.boyka.testng.api.requests.User;\nimport org.testng.annotations.Test;\n\npublic class TestApi {\n    @Test (description = "Test POST request for creating a new pet", priority = 1)\n    public void testUserCreation () {\n        // Create request body object.\n        final User user = User.createUser ()\n            .name ("Wasiq")\n            .job ("Software Engineer")\n            .create ();\n        \n        // Build Request.\n        final ApiRequest request = createRequest ().configKey ("key_1")\n            .method (POST)\n            .path ("/users")\n            .bodyObject (user)\n            .create ();\n\n        // Execute Request.\n        // highlight-start\n        final ApiResponse response = execute (request);\n        // highlight-end\n\n        // Verify Response.\n        response.verifyStatusCode ()\n            .isEqualTo (201);\n        response.verifyTextField ("id")\n            .isNotNull ();\n        response.verifyTextField ("name")\n            .isEqualTo (user.getName ());\n        response.verifyTextField ("job")\n            .isEqualTo (user.getJob ());\n        response.verifyTextField ("createdAt")\n            .isNotNull ();\n    }\n}')),i.createElement(P.Z,{value:"verify-response",label:"4. Verify Response"},i.createElement(L.Z,{className:Z,language:"java",title:"src/test/java/package/TestApi.java"},'import static com.github.wasiqb.boyka.builders.ApiRequest.createRequest;\nimport static com.github.wasiqb.boyka.enums.RequestMethod.POST;\nimport static com.github.wasiqb.boyka.manager.ApiManager.execute;\n\nimport com.github.wasiqb.boyka.builders.ApiRequest;\nimport com.github.wasiqb.boyka.builders.ApiResponse;\nimport com.github.wasiqb.boyka.testng.api.requests.User;\nimport org.testng.annotations.Test;\n\npublic class TestApi {\n    @Test (description = "Test POST request for creating a new pet", priority = 1)\n    public void testUserCreation () {\n        // Create request body object.\n        final User user = User.createUser ()\n            .name ("Wasiq")\n            .job ("Software Engineer")\n            .create ();\n        \n        // Build Request.\n        final ApiRequest request = createRequest ().configKey ("key_1")\n            .method (POST)\n            .path ("/users")\n            .bodyObject (user)\n            .create ();\n\n        // Execute Request.\n        final ApiResponse response = execute (request);\n\n        // Verify Response.\n        // highlight-start\n        response.verifyStatusCode ()\n            .isEqualTo (201);\n        response.verifyTextField ("id")\n            .isNotNull ();\n        response.verifyTextField ("name")\n            .isEqualTo (user.getName ());\n        response.verifyTextField ("job")\n            .isEqualTo (user.getJob ());\n        response.verifyTextField ("createdAt")\n            .isNotNull ();\n        // highlight-end\n    }\n}')))),i.createElement(P.Z,{value:"Web Testing"},i.createElement(j.Z,null,i.createElement(P.Z,{value:"config-setup",label:"1. Config Setup"},i.createElement(L.Z,{className:Z,language:"json",title:"src/test/resources/boyka-config.json"},'{\n  "ui": {\n    "playback": {\n      "implicit_wait": 10,\n      "explicit_wait": 30,\n      "page_load_timeout": 30,\n      "script_timeout": 10\n    },\n    "web": {\n      "test_local_chrome": {\n        "browser": "CHROME",\n        "headless": false\n      },\n      "test_local_firefox": {\n        "browser": "FIREFOX"\n      },\n      "test_local_edge": {\n        "browser": "EDGE"\n      },\n      "test_local_safari": {\n        "browser": "SAFARI"\n      },\n      "test_local_opera": {\n        "browser": "OPERA"\n      },\n      "test_browserstack_chrome": {\n        "browser": "REMOTE",\n        "cloud": "BROWSER_STACK",\n        "protocol": "HTTPS",\n        "host": "hub-cloud.browserstack.com",\n        "user_name": "${env:CLOUD_USER}",\n        "password": "${env:CLOUD_KEY}",\n        "capabilities": {\n          "browser": "Chrome",\n          "browser_version": "latest",\n          "os": "Windows",\n          "os_version": "10",\n          "resolution": "1920x1080",\n          "project": "Test Boyka Project",\n          "build": "Test BrowserStack Build",\n          "name": "Test BrowserStack Session"\n        }\n      },\n      "test_selenium_grid": {\n        "browser": "REMOTE",\n        "cloud": "NONE",\n        "port": "4444",\n        "capabilities": {\n          "browserName": "chrome",\n          "platform": "MAC"\n        }\n      }\n    },\n    "android": {\n      ...\n    },\n    "ios": {\n      ...\n    }\n  },\n  "api": {\n    ...\n  }\n}')),i.createElement(P.Z,{value:"page-object",label:"2. Page Objects"},i.createElement(L.Z,{className:Z,language:"java",title:"src/test/java/package/TestWeb.java"},'import static com.github.wasiqb.boyka.builders.Locator.buildLocator;\nimport static org.openqa.selenium.By.id;\n\nimport com.github.wasiqb.boyka.builders.Locator;\nimport lombok.Getter;\n\n@Getter\npublic class LoginPage {\n    public static LoginPage loginPage () {\n        return new LoginPage ();\n    }\n\n    private final Locator loginBox = buildLocator ().web (id ("login_button_container"))\n        .build ();\n    private final Locator loginButton = buildLocator ().web (id ("login-button"))\n        .parent (this.loginBox)\n        .build ();\n    private final Locator password = buildLocator ().web (id ("password"))\n        .parent (this.loginBox)\n        .build ();\n    private final Locator username = buildLocator ().web (id ("user-name"))\n        .parent (this.loginBox)\n        .build ();\n\n    private LoginPage () {\n        // Avoid explicit class initialization.\n    }\n}')),i.createElement(P.Z,{value:"write-test",label:"3. Write Tests"},i.createElement(L.Z,{className:Z,language:"java",title:"src/test/java/package/TestWeb.java"},'import static com.github.wasiqb.boyka.actions.DriverActions.navigateTo;\nimport static com.github.wasiqb.boyka.actions.ElementActions.submit;\nimport static com.github.wasiqb.boyka.actions.KeyboardActions.enterText;\nimport static com.github.wasiqb.boyka.actions.VerifyDriverActions.verifyBrowserTitle;\nimport static com.github.wasiqb.boyka.actions.VerifyDriverActions.verifyBrowserUrl;\nimport static com.github.wasiqb.boyka.actions.VerifyElementActions.verifyElementDisplayed;\nimport static com.github.wasiqb.boyka.actions.VerifyElementActions.verifyElementEnabled;\nimport static com.github.wasiqb.boyka.manager.DriverManager.closeDriver;\nimport static com.github.wasiqb.boyka.manager.DriverManager.createDriver;\nimport static com.github.wasiqb.boyka.testng.web.pages.HomePage.homePage;\nimport static com.github.wasiqb.boyka.testng.web.pages.LoginPage.loginPage;\nimport static java.text.MessageFormat.format;\n\nimport com.github.wasiqb.boyka.enums.ApplicationType;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\npublic class TestWeb {\n    private static final String URL = "https://www.saucedemo.com";\n\n    @BeforeClass (description = "Setup test class")\n    public void setupTestClass () {\n        createDriver (ApplicationType.WEB, "test_local_chrome");\n    }\n\n    @AfterClass (description = "Tear down test class")\n    public void tearDownTestClass () {\n        closeDriver ();\n    }\n    \n    @Test (description = "Test login functionality")\n    public void testLogin () {\n        navigateTo (URL);\n        verifyBrowserUrl ().startsWith (URL);\n        enterText (loginPage ().getUsername (), "standard_user");\n        enterText (loginPage ().getPassword (), "secret_sauce");\n        submit (loginPage ().getLoginButton ());\n        verifyBrowserUrl ().isEqualTo (format ("{0}/inventory.html", URL));\n        verifyBrowserTitle ().isEqualTo ("Swag Labs");\n        verifyElementDisplayed (homePage ().getMenuButton ()).isTrue ();\n        verifyElementEnabled (homePage ().getMenuButton ()).isTrue ();\n    }\n}'))))))},O=function(){return i.createElement(a.Z,{title:b.TN,description:b.WL},i.createElement("main",null,i.createElement(S,{title:b.TN,tagLine:b.WL,image:b.BH,buttons:b.ZY,gitButtons:b.tr}),i.createElement(p,{features:b.R2}),i.createElement(U,null)))}}}]);