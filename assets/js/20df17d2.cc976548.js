"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5125],{895:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"tutorials/data-driven-testing","title":"\u2705 Data Driven Testing","description":"Introduction","source":"@site/docs/framework-docs/tutorials/data-driven-testing.md","sourceDirName":"tutorials","slug":"/tutorials/data-driven-testing","permalink":"/boyka-framework/docs/tutorials/data-driven-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/BoykaFramework/boyka-framework/edit/main/website/docs/framework-docs/tutorials/data-driven-testing.md","tags":[],"version":"current","lastUpdatedBy":"Wasiq Bhamla","lastUpdatedAt":1756583521000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"\u2705 Data Driven Testing"},"sidebar":"docs","previous":{"title":"\ud83d\udcca Generate Allure Report","permalink":"/boyka-framework/docs/tutorials/generate-allure-report"}}');var i=a(1273),s=a(2993);const o={sidebar_position:5,title:"\u2705 Data Driven Testing"},r=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Configure the Test Data",id:"step-1-configure-the-test-data",level:2},{value:"Step 2: Create a Test Case",id:"step-2-create-a-test-case",level:2},{value:"Step 3: Create a Test data class",id:"step-3-create-a-test-data-class",level:2},{value:"Approach 1: Using POJO class object",id:"approach-1-using-pojo-class-object",level:2},{value:"Step 4: Create a Test data provider Class",id:"step-4-create-a-test-data-provider-class",level:3},{value:"Step 5: Create a Test Class",id:"step-5-create-a-test-class",level:3},{value:"Approach 2: Using IDataRow interface object",id:"approach-2-using-idatarow-interface-object",level:2},{value:"Step 4: Create a Test data provider method",id:"step-4-create-a-test-data-provider-method",level:3},{value:"Step 5: Create a Test Class using IDataRow interface",id:"step-5-create-a-test-class-using-idatarow-interface",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"Data Driven Testing (DDT) is a testing methodology that allows you to run the same test case multiple times with different sets of data. This approach is particularly useful when you want to validate the same functionality with various inputs and expected outputs."}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, we will explore how to implement Data Driven Testing in our test cases using the Boyka Framework."}),"\n",(0,i.jsx)(t.h2,{id:"step-1-configure-the-test-data",children:"Step 1: Configure the Test Data"}),"\n",(0,i.jsx)(t.p,{children:"To implement Data Driven Testing in the Boyka Framework, you need to configure the test data. The framework supports reading test data from Excel files."}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"boyka-config.json"})," file, you need to specify the path to the Excel file and the sheet name that contains the test data."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "data": {\n    "path": "data/excel"\n  }\n}\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Check out more details about the Test data configuration in the ",(0,i.jsx)(t.a,{href:"/docs/guides/config/configuration#data-config",children:"Configuration"})," section."]})}),"\n",(0,i.jsx)(t.h2,{id:"step-2-create-a-test-case",children:"Step 2: Create a Test Case"}),"\n",(0,i.jsx)(t.p,{children:"First, you need to create the test case that you want in an Excel file in the folder mentioned in the config file."}),"\n",(0,i.jsx)(t.p,{children:"For this example, we will create a simple test case for Restful Booking API."}),"\n",(0,i.jsx)(t.p,{children:"Following is the Excel file structure:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"SrNo"}),(0,i.jsx)(t.th,{children:"FirstName"}),(0,i.jsx)(t.th,{children:"LastName"}),(0,i.jsx)(t.th,{children:"TotalPrice"}),(0,i.jsx)(t.th,{children:"DepositPaid"}),(0,i.jsx)(t.th,{children:"CheckInDate"}),(0,i.jsx)(t.th,{children:"CheckOutDate"}),(0,i.jsx)(t.th,{children:"AdditionalNeeds"}),(0,i.jsx)(t.th,{children:"Enabled"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"Wasiq"}),(0,i.jsx)(t.td,{children:"Bhamla"}),(0,i.jsx)(t.td,{children:"1000"}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"2023-12-01"}),(0,i.jsx)(t.td,{children:"2023-12-03"}),(0,i.jsx)(t.td,{children:"No needs"}),(0,i.jsx)(t.td,{children:"TRUE"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"Faisal"}),(0,i.jsx)(t.td,{children:"Khatri"}),(0,i.jsx)(t.td,{children:"2000"}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:"2023-12-03"}),(0,i.jsx)(t.td,{children:"2023-12-05"}),(0,i.jsx)(t.td,{children:"Breakfast"}),(0,i.jsx)(t.td,{children:"TRUE"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"John"}),(0,i.jsx)(t.td,{children:"Doe"}),(0,i.jsx)(t.td,{children:"3000"}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"2023-12-03"}),(0,i.jsx)(t.td,{children:"2023-12-05"}),(0,i.jsx)(t.td,{children:"Lunch"}),(0,i.jsx)(t.td,{children:"TRUE"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"George"}),(0,i.jsx)(t.td,{children:"Gunner"}),(0,i.jsx)(t.td,{children:"6700"}),(0,i.jsx)(t.td,{children:"No"}),(0,i.jsx)(t.td,{children:"2023-12-05"}),(0,i.jsx)(t.td,{children:"2023-12-11"}),(0,i.jsx)(t.td,{children:"Dinner"}),(0,i.jsx)(t.td,{children:"FALSE"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"step-3-create-a-test-data-class",children:"Step 3: Create a Test data class"}),"\n",(0,i.jsx)(t.p,{children:"Create a test data class that will hold the data for each test case. This class will be used to read the data from the Excel file and pass it to the test case."}),"\n",(0,i.jsx)(t.p,{children:"Following is the sample test data class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import lombok.Data;\nimport lombok.ToString;\n\n@ToString\n@Data\npublic class BookingTestData {\n  private String  additionalNeeds;\n  private String  checkInDate;\n  private String  checkOutDate;\n  private String  depositPaid;\n  private Boolean enabled;\n  private String  firstName;\n  private String  lastName;\n  private Double  srNo;\n  private Double  totalPrice;\n}\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"Important",type:"warning",children:[(0,i.jsxs)(t.p,{children:["Since we are using ",(0,i.jsx)(t.code,{children:"@Data"})," annotation from Lombok, it will create getters and setters for all the fields in the class."]}),(0,i.jsxs)(t.p,{children:["For example, ",(0,i.jsx)(t.code,{children:"srNo"})," will be converted to ",(0,i.jsx)(t.code,{children:"getSrNo()"})," and ",(0,i.jsx)(t.code,{children:"setSrNo(Double srNo)"})," methods."]}),(0,i.jsxs)(t.p,{children:["You need to make sure that the column name in the Excel file matches the field setter method name (",(0,i.jsx)(t.strong,{children:"without the prefix"}),") in the class."]}),(0,i.jsxs)(t.p,{children:["Example, ",(0,i.jsx)(t.code,{children:"SrNo"})," in the Excel file will be converted to ",(0,i.jsx)(t.code,{children:"setSrNo(Double srNo)"})," method in the class."]})]}),"\n",(0,i.jsx)(t.h2,{id:"approach-1-using-pojo-class-object",children:"Approach 1: Using POJO class object"}),"\n",(0,i.jsx)(t.p,{children:"In this approach, we will use the POJO class object to read the data from the Excel file and pass it to the test case."}),"\n",(0,i.jsx)(t.h3,{id:"step-4-create-a-test-data-provider-class",children:"Step 4: Create a Test data provider Class"}),"\n",(0,i.jsxs)(t.p,{children:["In this step, we will create a test data provider class that will read the data from the Excel file and return it as a list of ",(0,i.jsx)(t.code,{children:"BookingTestData"})," objects."]}),"\n",(0,i.jsx)(t.p,{children:"Following is the sample test data provider class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import static io.github.boykaframework.actions.data.TestDataAction.withData;\n\nimport java.util.Iterator;\n\nimport io.github.boykaframework.actions.interfaces.data.ITestDataAction;\nimport io.github.boykaframework.testng.api.restful.pojo.BookingTestData;\nimport org.testng.annotations.DataProvider;\n\npublic final class BookingDataProviders {\n  private static final ITestDataAction DATA;\n\n  static {\n    // The Excel file should be placed in the `src/test/resources` folder.\n    // highlight-next-line\n    DATA = withData ("BookingData").inBlock ("Bookings");\n  }\n\n  @DataProvider\n  public static Iterator<Object[]> getBookingDataObject () {\n    // Here, we get the data from the Excel file and filter it based on the `Enabled` column.\n    // highlight-next-line\n    final var rows = DATA.get (BookingTestData.class);\n    return rows.stream ()\n      .filter (BookingTestData::getEnabled)\n      .map (d -> new Object[] { d })\n      .toList ()\n      .iterator ();\n  }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Here, we are using the ",(0,i.jsx)(t.code,{children:"withData"})," method to read the data from the Excel file. The ",(0,i.jsx)(t.code,{children:"inBlock"})," method is used to specify the sheet name in the Excel file."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"get"})," method is used to read the data from the Excel file and convert it to a list of ",(0,i.jsx)(t.code,{children:"BookingTestData"})," objects."]}),"\n",(0,i.jsx)(t.h3,{id:"step-5-create-a-test-class",children:"Step 5: Create a Test Class"}),"\n",(0,i.jsx)(t.p,{children:"In this step, we will create a test class that will use the test data provider class to run the test cases."}),"\n",(0,i.jsx)(t.p,{children:"Following is the sample test class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import static io.github.boykaframework.actions.api.ApiActions.withRequest;\nimport static io.github.boykaframework.enums.PlatformType.API;\nimport static io.github.boykaframework.manager.ParallelSession.clearSession;\nimport static io.github.boykaframework.manager.ParallelSession.createSession;\n\nimport java.text.DecimalFormat;\n\nimport io.github.boykaframework.actions.interfaces.data.IDataRow;\nimport io.github.boykaframework.builders.ApiRequest;\nimport io.github.boykaframework.enums.RequestMethod;\nimport io.github.boykaframework.testng.api.restful.data.BookingDataProviders;\nimport io.github.boykaframework.testng.api.restful.pojo.BookingData;\nimport io.github.boykaframework.testng.api.restful.pojo.BookingDates;\nimport io.github.boykaframework.testng.api.restful.pojo.BookingTestData;\nimport lombok.SneakyThrows;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\npublic class DataDrivenBookingTest {\n  @BeforeClass\n  public void setupClass () {\n    createSession (API, "test_restfulbooker");\n  }\n\n  @AfterClass\n  public void tearDownTestClass () {\n    clearSession ();\n  }\n\n  // Here, we are using the `dataProvider` attributes to specify the test data provider class and method.\n  // highlight-next-line\n  @Test (dataProviderClass = BookingDataProviders.class, dataProvider = "getBookingDataObject")\n  public void testBookingObject (final BookingTestData bookingTestData) {\n    final var depositPaid = bookingTestData.getDepositPaid ()\n      .equalsIgnoreCase ("yes");\n    final var bookingData = BookingData.builder ()\n      .firstname (bookingTestData.getFirstName ())\n      .lastname (bookingTestData.getLastName ())\n      .totalprice (bookingTestData.getTotalPrice ()\n        .intValue ())\n      .depositpaid (depositPaid)\n      .bookingdates (BookingDates.builder ()\n        .checkin (bookingTestData.getCheckInDate ())\n        .checkout (bookingTestData.getCheckOutDate ())\n        .build ())\n      .additionalneeds (bookingTestData.getAdditionalNeeds ())\n      .build ();\n\n    testBooking (bookingData);\n  }\n\n  private void testBooking (final BookingData bookingData) {\n    final var request = ApiRequest.createRequest ()\n      .method (RequestMethod.POST)\n      .header ("Accept", "application/json")\n      .path ("/booking")\n      .bodyObject (bookingData)\n      .create ();\n\n      final var response = withRequest (request).execute ();\n\n      response.verifyStatusCode ()\n        .isEqualTo (200);\n      response.verifyStatusMessage ()\n        .isEqualTo ("OK");\n      response.verifySchema ("create-booking-schema.json");\n      response.verifyTextField ("bookingid")\n        .isNotNull ();\n      response.verifyTextField ("booking.firstname")\n        .isEqualTo (bookingData.getFirstname ());\n      response.verifyBooleanField ("booking.depositpaid")\n        .isEqualTo (bookingData.isDepositpaid ());\n      response.verifyHeader ("Content-Type")\n        .isEqualTo ("application/json; charset=utf-8");\n  }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"approach-2-using-idatarow-interface-object",children:"Approach 2: Using IDataRow interface object"}),"\n",(0,i.jsxs)(t.p,{children:["In this approach, we will use the ",(0,i.jsx)(t.code,{children:"IDataRow"})," interface object to read the data from the Excel file and pass it to the test case."]}),"\n",(0,i.jsx)(t.h3,{id:"step-4-create-a-test-data-provider-method",children:"Step 4: Create a Test data provider method"}),"\n",(0,i.jsxs)(t.p,{children:["In this step, we will create a test data provider method that will read the data from the Excel file and return it as a list of ",(0,i.jsx)(t.code,{children:"IDataRow"})," objects."]}),"\n",(0,i.jsx)(t.p,{children:"Following is the sample test data provider method:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"  . . .\n  @DataProvider\n  public static Iterator<Object[]> getBookingData () {\n    // Here, we get the data from the Excel file using the `rows` method.\n    // highlight-next-line\n    final var rows = DATA.rows ();\n    return rows.stream ()\n      .map (d -> new Object[] { d })\n      .toList ()\n      .iterator ();\n  }\n  . . .\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Here, we are using the ",(0,i.jsx)(t.code,{children:"rows"})," method to read the data from the Excel file and convert it to a list of ",(0,i.jsx)(t.code,{children:"IDataRow"})," objects."]}),"\n",(0,i.jsx)(t.h3,{id:"step-5-create-a-test-class-using-idatarow-interface",children:"Step 5: Create a Test Class using IDataRow interface"}),"\n",(0,i.jsx)(t.p,{children:"In this step, we will create a test class that will use the test data provider method to run the test cases."}),"\n",(0,i.jsx)(t.p,{children:"Following is the sample test class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'. . .\n@SneakyThrows\n@Test (dataProviderClass = BookingDataProviders.class, dataProvider = "getBookingData")\npublic void testBooking (final IDataRow row) {\n  final var depositPaid = row.cell ("DepositPaid")\n    .toString ()\n    .equalsIgnoreCase ("yes");\n  final var formatter = new DecimalFormat ("#0.0");\n  final var bookingData = BookingData.builder ()\n    .firstname (row.cell ("FirstName"))\n    .lastname (row.cell ("LastName"))\n    .totalprice (formatter.parse (row.cell ("TotalPrice")\n      .toString ())\n      .intValue ())\n    .depositpaid (depositPaid)\n    .bookingdates (BookingDates.builder ()\n      .checkin (row.cell ("CheckInDate")\n        .toString ())\n      .checkout (row.cell ("CheckOutDate")\n        .toString ())\n      .build ())\n    .additionalneeds (row.cell ("AdditionalNeeds"))\n    .build ();\n\n  testBooking (bookingData);\n}\n. . .\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Here, we are using the ",(0,i.jsx)(t.code,{children:"cell"})," method to read the data from the Excel file for a specific column based on the column name."]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(t.p,{children:["In this tutorial, we have explored how to implement Data Driven Testing in the Boyka Framework using Excel files. We have seen two approaches to implement DDT: using POJO class objects and using ",(0,i.jsx)(t.code,{children:"IDataRow"})," interface objects."]}),"\n",(0,i.jsx)(t.p,{children:"Both approaches are valid and can be used based on your preference. The Boyka Framework provides a flexible way to implement DDT, making it easy to validate the same functionality with different sets of data."}),"\n",(0,i.jsx)(t.p,{children:"You can now use Data Driven Testing in your test cases to improve the efficiency and coverage of your tests. Happy testing!"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2993:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(3917);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);