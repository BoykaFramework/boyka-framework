"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2428],{261:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"actions/drivers/window-actions","title":"WindowActions","description":"Static methods","source":"@site/docs/api/actions/drivers/window-actions.md","sourceDirName":"actions/drivers","slug":"/actions/drivers/window-actions","permalink":"/boyka-framework/api/actions/drivers/window-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/BoykaFramework/boyka-framework/edit/main/website/docs/api/actions/drivers/window-actions.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1733726831000,"sidebarPosition":7,"frontMatter":{"title":"WindowActions","sidebar_position":7},"sidebar":"api","previous":{"title":"NavigateActions","permalink":"/boyka-framework/api/actions/drivers/navigate-actions"},"next":{"title":"ClickableActions","permalink":"/boyka-framework/api/actions/elements/clickable-actions"}}');var t=i(7557),s=i(6847);const d={title:"WindowActions",sidebar_position:7},r=void 0,c={},a=[{value:"Static methods",id:"static-methods",level:2},{value:"<code>onWindow</code>",id:"onwindow",level:3},{value:"Instance methods",id:"instance-methods",level:2},{value:"<code>close</code>",id:"close",level:3},{value:"<code>currentHandle</code>",id:"current-handle",level:3},{value:"<code>fullScreen</code>",id:"full-screen",level:3},{value:"<code>getScreenshot</code>",id:"get-screenshot",level:3},{value:"<code>maximize</code>",id:"maximize",level:3},{value:"<code>minimize</code>",id:"minimize",level:3},{value:"<code>switchToDefault</code>",id:"switch-to-default",level:3},{value:"<code>switchToNew</code>",id:"switch-to-new",level:3},{value:"<code>switchTo (handle)</code>",id:"switch-to",level:3},{value:"<code>takeScreenshot</code>",id:"take-screenshot",level:3},{value:"<code>takeScreenshot (path)</code>",id:"take-screenshot-path",level:3},{value:"<code>title</code>",id:"title",level:3},{value:"<code>viewportSize</code>",id:"viewport-size",level:3},{value:"<code>handles</code>",id:"handles",level:3},{value:"<code>verifyBrowserTitle</code>",id:"verify-browser-title",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"static-methods",children:"Static methods"}),"\n",(0,t.jsx)(n.h3,{id:"onwindow",children:(0,t.jsx)(n.code,{children:"onWindow"})}),"\n",(0,t.jsxs)(n.p,{children:["This will return ",(0,t.jsx)(n.code,{children:"IWindowActions"})," which will expose different methods to handle windows related actions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"IWindowActions windowActions = WindowActions.onWindow ();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"instance-methods",children:"Instance methods"}),"\n",(0,t.jsx)(n.h3,{id:"close",children:(0,t.jsx)(n.code,{children:"close"})}),"\n",(0,t.jsx)(n.p,{children:"This method will close the open browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().close ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"current-handle",children:(0,t.jsx)(n.code,{children:"currentHandle"})}),"\n",(0,t.jsx)(n.p,{children:"This method returns the current window handle."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nString handle = onWindow ().currentHandle ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"full-screen",children:(0,t.jsx)(n.code,{children:"fullScreen"})}),"\n",(0,t.jsx)(n.p,{children:"This method will on-demand do full screen on the browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().fullScreen ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"get-screenshot",children:(0,t.jsx)(n.code,{children:"getScreenshot"})}),"\n",(0,t.jsx)(n.p,{children:"This method will get the screenshot of the current page and return its Base64 encoded string."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nSystem.out.println (onWindow ().getScreenshot ());\n"})}),"\n",(0,t.jsx)(n.h3,{id:"maximize",children:(0,t.jsx)(n.code,{children:"maximize"})}),"\n",(0,t.jsx)(n.p,{children:"This method will maximize the browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().maximize ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"minimize",children:(0,t.jsx)(n.code,{children:"minimize"})}),"\n",(0,t.jsx)(n.p,{children:"This method will minimize the browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().minimize ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"switch-to-default",children:(0,t.jsx)(n.code,{children:"switchToDefault"})}),"\n",(0,t.jsx)(n.p,{children:"This method will switch to the first window after you close any of the other opened windows."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().switchToDefault ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"switch-to-new",children:(0,t.jsx)(n.code,{children:"switchToNew"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used to switch to new window of given type."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\nimport org.openqa.selenium.WindowType;\n. . .\nonWindow ().switchToNew (WindowType.TAB);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"switch-to",children:(0,t.jsx)(n.code,{children:"switchTo (handle)"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used to switch to window of given handle."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().switchTo ("window-handle");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"take-screenshot",children:(0,t.jsx)(n.code,{children:"takeScreenshot"})}),"\n",(0,t.jsxs)(n.p,{children:["This method will take the screenshot of the current page and save it at the path configured in ",(0,t.jsx)(n.code,{children:"boyka-config.json"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().takeScreenshot ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"take-screenshot-path",children:(0,t.jsx)(n.code,{children:"takeScreenshot (path)"})}),"\n",(0,t.jsx)(n.p,{children:"This method will take the screenshot of the current page and save it at the path mentioned in the parameter."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().takeScreenshot ("path/to/screenshot.png");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"title",children:(0,t.jsx)(n.code,{children:"title"})}),"\n",(0,t.jsx)(n.p,{children:"This method will get the title of the browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nSystem.out.println (onWindow ().getTitle ());\n"})}),"\n",(0,t.jsx)(n.h3,{id:"viewport-size",children:(0,t.jsx)(n.code,{children:"viewportSize"})}),"\n",(0,t.jsx)(n.p,{children:"This method will the size dimension of the screen viewport for Mobile screen or Browser window."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\nimport org.openqa.selenium.Dimension;\n. . .\nDimension size = onWindow ().viewportSize ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"handles",children:(0,t.jsx)(n.code,{children:"handles"})}),"\n",(0,t.jsx)(n.p,{children:"This method will get the list of all open window handles."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nList<String> handles = onWindow ().handles ();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"verify-browser-title",children:(0,t.jsx)(n.code,{children:"verifyBrowserTitle"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used to verify the browser title."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import static io.github.boykaframework.actions.drivers.WindowActions.onWindow;\n. . .\nonWindow ().verifyTitle (title).isEqualTo ("Swag Labs");\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},6847:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>r});var o=i(8225);const t={},s=o.createContext(t);function d(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);