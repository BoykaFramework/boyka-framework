name: Deploy Release to GitHub and Maven Central

on:
  workflow_dispatch:
    inputs:
      pre-release:
        description: Is this a pre-release?
        required: true
        type: boolean
        default: false

env:
  GITHUB_AUTH: ${{ secrets.PUSH_TOKEN }}
  PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      new-version: ${{ steps.version.outputs.version }}
      old-version: ${{ steps.old_version.outputs.previous_version }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node v18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      - name: Get the previous version
        id: old_version
        run: |
          export PRE_RELEASE=${{ inputs.pre-release }}
          if $PRE_RELEASE ; then
            export MVN_OLD_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "previous_version=${MVN_OLD_VERSION:1}" >> $GITHUB_OUTPUT
          else
            export MVN_OLD_VERSION=$(node -pe "require('./package.json').version")
            echo "previous_version=${MVN_OLD_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Update pre-release version
        if: ${{ inputs.pre-release }}
        run: pnpm prerelease

      - name: Update release version
        if: ${{ ! inputs.pre-release }}
        run: pnpm release

      - name: Get the new version
        id: version
        run: |
          export MVN_VERSION=$(node -pe "require('./website/package.json').version")
          echo "version=$MVN_VERSION" >> $GITHUB_OUTPUT

      - name: Generate Change log
        if: ${{ steps.version.outputs.version != null }}
        run: |
          pnpm --silent changelog --from v${{ steps.old_version.outputs.previous_version }} --next-version v${{ steps.version.outputs.version }} > CHANGELOG.md

      - name: Upload updated version related files to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version-files-${{ github.run_id }}
          retention-days: 1
          path: |
            ${{ github.workspace }}/CHANGELOG.md
            ${{ github.workspace }}/lerna.json
            ${{ github.workspace }}/website/package.json

  release-snapshot:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.new-version != null }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Restore local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ github.sha }}

      - name: Maven command to update snapshot version
        run: mvn build-helper:parse-version versions:set -f core-java/pom.xml -DnewVersion=${{ needs.prepare.outputs.new-version }}-SNAPSHOT versions:commit

      - name: Release snapshot to Maven central
        uses: WasiqB/maven-publish-action@v2
        with:
          gpg_private_key: ${{ env.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          nexus_username: ${{ env.NEXUS_USERNAME }}
          nexus_password: ${{ env.NEXUS_PASSWORD }}
          maven_profiles: release
          server_id: ossrh
          settings_path: ${{ github.workspace }}/core-java/setting/settings.xml
          directory: ${{ github.workspace }}/core-java
          maven_args: -DskipTests -Dcheckstyle.skip

  release:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - release-snapshot

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Restore local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ github.sha }}

      - name: Maven command to update release version
        run: mvn build-helper:parse-version versions:set -f core-java/pom.xml -DnewVersion=${{ needs.prepare.outputs.new-version }} versions:commit

      - name: Release snapshot to Maven central
        uses: WasiqB/maven-publish-action@v2
        with:
          gpg_private_key: ${{ env.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          nexus_username: ${{ env.NEXUS_USERNAME }}
          nexus_password: ${{ env.NEXUS_PASSWORD }}
          maven_profiles: release
          server_id: ossrh
          settings_path: ${{ github.workspace }}/core-java/setting/settings.xml
          directory: ${{ github.workspace }}/core-java
          maven_args: -DskipTests -Dcheckstyle.skip

      - name: Build the project JAR files
        run: mvn clean install -f core-java/pom.xml -DskipTests -Dcheckstyle.skip

      - name: Upload target folder
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ github.run_id }}
          retention-days: 1
          path: |
            ${{ github.workspace }}/core-java/target

      - name: Upload version files folder
        uses: actions/upload-artifact@v4
        with:
          name: version-pom-files-${{ github.run_id }}
          retention-days: 1
          path: ${{ github.workspace }}/core-java/pom.xml

  push-pom:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - release

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.PUSH_TOKEN }}

      - name: Download Version files
        uses: actions/download-artifact@v4
        with:
          name: version-files-${{ github.run_id }}

      - name: Download Version pom files
        uses: actions/download-artifact@v4
        with:
          name: version-pom-files-${{ github.run_id }}
          path: ${{ github.workspace }}/core-java

      - name: Update new version in README and Usage
        uses: jacobtomlinson/gha-find-replace@v3
        if: ${{ ! inputs.pre-release }}
        with:
          find: ${{ needs.prepare.outputs.old-version }}
          replace: ${{ needs.prepare.outputs.new-version }}
          regex: false
          include: |
            ${{ github.workspace }}/README.md
            ${{ github.workspace }}/website/docs/framework-docs/getting-started/usage.md

      - name: Update new version in package.json
        uses: jacobtomlinson/gha-find-replace@v3
        if: ${{ ! inputs.pre-release }}
        with:
          find: '"version": "${{ needs.prepare.outputs.old-version }}"'
          replace: '"version": "${{ needs.prepare.outputs.new-version }}"'
          regex: false
          include: |
            ${{ github.workspace }}/package.json

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Push updated version files
        uses: EndBug/add-and-commit@v9
        with:
          message: |
            chore(Internal): :bookmark: released v${{ needs.prepare.outputs.new-version }} to maven central
          push: true
          default_author: user_info
          commit: --no-verify

  github:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - push-pom

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download target folder
        uses: actions/download-artifact@v4
        with:
          name: target-${{ github.run_id }}
          path: ${{ github.workspace }}/core-java/target

      - name: Download Version files
        uses: actions/download-artifact@v4
        with:
          name: version-files-${{ github.run_id }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ env.PUSH_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: v${{ needs.prepare.outputs.new-version }}
          name: Version ${{ needs.prepare.outputs.new-version }}
          prerelease: ${{ inputs.pre-release }}
          draft: false
          body_path: CHANGELOG.md
          discussion_category_name: Announcements
          generate_release_notes: false
          files: |
            core-java/target/*.jar
